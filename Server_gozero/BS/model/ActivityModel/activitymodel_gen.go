// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package ActivityModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	activityFieldNames          = builder.RawFieldNames(&Activity{})
	activityRows                = strings.Join(activityFieldNames, ",")
	activityRowsExpectAutoSet   = strings.Join(stringx.Remove(activityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	activityRowsWithPlaceHolder = strings.Join(stringx.Remove(activityFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	activityModel interface {
		Insert(ctx context.Context, data *Activity) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Activity, error)
		Update(ctx context.Context, data *Activity) error
		Delete(ctx context.Context, id int64) error
	}

	defaultActivityModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Activity struct {
		Id         int64          `db:"id"`
		DelState   int64          `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time      `db:"del_time"`    // 删除时间
		CreateTime time.Time      `db:"create_time"` // 创建时间
		ActivityId int64          `db:"activity_id"` // 活动的分布式唯一ID
		FarmId     int64          `db:"farm_id"`     // 关联农场id
		MainPic    string         `db:"MainPic"`     // 活动主图
		ImageUrls  sql.NullString `db:"image_urls"`  // 图片信息
		Text       sql.NullString `db:"text"`        // 活动详情
		StartTime  time.Time      `db:"start_time"`  // 活动开始时间
		EndTime    time.Time      `db:"end_time"`    // 活动结束时间
	}
)

func newActivityModel(conn sqlx.SqlConn) *defaultActivityModel {
	return &defaultActivityModel{
		conn:  conn,
		table: "`activity`",
	}
}

func (m *defaultActivityModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultActivityModel) FindOne(ctx context.Context, id int64) (*Activity, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", activityRows, m.table)
	var resp Activity
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultActivityModel) Insert(ctx context.Context, data *Activity) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, activityRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.ActivityId, data.FarmId, data.MainPic, data.ImageUrls, data.Text, data.StartTime, data.EndTime)
	return ret, err
}

func (m *defaultActivityModel) Update(ctx context.Context, data *Activity) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, activityRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.ActivityId, data.FarmId, data.MainPic, data.ImageUrls, data.Text, data.StartTime, data.EndTime, data.Id)
	return err
}

func (m *defaultActivityModel) tableName() string {
	return m.table
}
