// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package AdminModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	adminFieldNames          = builder.RawFieldNames(&Admin{})
	adminRows                = strings.Join(adminFieldNames, ",")
	adminRowsExpectAutoSet   = strings.Join(stringx.Remove(adminFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	adminRowsWithPlaceHolder = strings.Join(stringx.Remove(adminFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	adminModel interface {
		Insert(ctx context.Context, data *Admin) (sql.Result, error)
		FindOneByPhoneNumber(ctx context.Context, phone_number string) (*Admin, error)
		FindOneByID(ctx context.Context, AdminId int64) (*Admin, error)
		Update(ctx context.Context, data *Admin) error
		Delete(ctx context.Context, id int64) error
		UpdatePhoneNumber(ctx context.Context, adminId int64, newPhone string) error
		UpdatePassword(ctx context.Context, adminId int64, newPassword string) error
		UpdateAvatar(ctx context.Context, adminId int64, newAvatar string) error
	}

	defaultAdminModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Admin struct {
		Id          int64     `db:"id"`
		DelState    int64     `db:"del_state"`    // 0-正常 1-删除
		DelTime     time.Time `db:"del_time"`     // 创建时间
		CreateTime  time.Time `db:"create_time"`  // 删除时间
		AdminId     int64     `db:"admin_id"`     // 分布式唯一ID
		PhoneNumber string    `db:"phone_number"` // 用户电话号码
		Password    string    `db:"password"`     // 用户密码
		Avatar      string    `db:"avatar"`       // 用户头像url
		Nickname    string    `db:"nickname"`     // 用户昵称
		QqEmail     string    `db:"qq_email"`     // 邮箱
		Gender      int64     `db:"gender"`       // 0-未知 1-男 2-女
		FarmId      int64     `db:"farm_id"`      // 关联农场id
	}
)

func newAdminModel(conn sqlx.SqlConn) *defaultAdminModel {
	return &defaultAdminModel{
		conn:  conn,
		table: "`admin`",
	}
}

func (m *defaultAdminModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAdminModel) FindOneByPhoneNumber(ctx context.Context, phone_number string) (*Admin, error) {
	query := fmt.Sprintf("select %s from %s where `phone_number` = ? limit 1", adminRows, m.table)
	var resp Admin
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone_number)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAdminModel) FindOneByID(ctx context.Context, AdminId int64) (*Admin, error){
	query := fmt.Sprintf("select %s from %s where `admin_id` = ? limit 1", adminRows, m.table)
	var resp Admin
	err := m.conn.QueryRowCtx(ctx, &resp, query, AdminId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
func (m *defaultAdminModel) Insert(ctx context.Context, data *Admin) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, adminRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.AdminId, data.PhoneNumber, data.Password, data.Avatar, data.Nickname, data.QqEmail, data.Gender, data.FarmId)
	return ret, err
}

func (m *defaultAdminModel) Update(ctx context.Context, data *Admin) error {
	query := fmt.Sprintf("update %s set  `nickname` = ?, `qq_email` = ?, `gender` = ? where `admin_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.Nickname, data.QqEmail, data.Gender, data.AdminId)
	return err
}

func (m *defaultAdminModel) UpdatePassword(ctx context.Context, adminId int64, newPassword string) error {
	query := fmt.Sprintf("update %s set `password` = ? where `admin_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, newPassword, adminId)
	return err
}
func (m *defaultAdminModel) UpdatePhoneNumber(ctx context.Context, adminId int64, newPhone string) error {
	query := fmt.Sprintf("update %s set `phone_number` = ? where `admin_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, newPhone, adminId)
	return err
}
func (m *defaultAdminModel) UpdateAvatar(ctx context.Context, adminId int64, newAvatar string) error {
	query := fmt.Sprintf("update %s set `avatar` = ? where `admin_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, newAvatar, adminId)
	return err
}


func (m *defaultAdminModel) tableName() string {
	return m.table
}

