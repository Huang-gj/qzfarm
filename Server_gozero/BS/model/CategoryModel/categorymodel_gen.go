// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package CategoryModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoryFieldNames          = builder.RawFieldNames(&Category{})
	categoryRows                = strings.Join(categoryFieldNames, ",")
	categoryRowsExpectAutoSet   = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	categoryRowsWithPlaceHolder = strings.Join(stringx.Remove(categoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	categoryModel interface {
		Insert(ctx context.Context, data *Category) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Category, error)
		Update(ctx context.Context, data *Category) error
		Delete(ctx context.Context, id int64) error
		FindByCateType(ctx context.Context, cateType int64) ([]*Category, error)
		UpdateImageUrlByCategoryId(ctx context.Context, categoryId int64, imageUrl string) error
	}

	defaultCategoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Category struct {
		Id         int64     `db:"id"`
		DelState   int64     `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time `db:"del_time"`    // 删除时间
		CreateTime time.Time `db:"create_time"` // 创建时间
		CategoryId int64     `db:"category_id"` // 分类的分布式唯一ID
		Name       string    `db:"name"`        // 种类名称
		CateType   int64     `db:"cate_type"`   // 种类类型
		Text       string    `db:"text"`
		ImageUrl string `db:"image_url"` // 图片链接

	}
)

func newCategoryModel(conn sqlx.SqlConn) *defaultCategoryModel {
	return &defaultCategoryModel{
		conn:  conn,
		table: "`category`",
	}
}

func (m *defaultCategoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCategoryModel) FindOne(ctx context.Context, id int64) (*Category, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", categoryRows, m.table)
	var resp Category
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) Insert(ctx context.Context, data *Category) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (`category_id`, `name`, `cate_type`, `text`) values (?, ?, ?, ?)", m.table)
	ret, err := m.conn.ExecCtx(ctx, query, data.CategoryId, data.Name, data.CateType, data.Text)
	return ret, err
}


func (m *defaultCategoryModel) Update(ctx context.Context, data *Category) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, categoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.CategoryId, data.Name, data.CateType, data.Id)
	return err
}

func (m *defaultCategoryModel) tableName() string {
	return m.table
}

func (m *defaultCategoryModel) FindByCateType(ctx context.Context, cateType int64) ([]*Category, error) {
	query := fmt.Sprintf("select %s from %s where `cate_type` = ?", categoryRows, m.table)
	var resp []*Category
	err := m.conn.QueryRowsCtx(ctx, &resp, query, cateType)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) UpdateImageUrlByCategoryId(ctx context.Context, categoryId int64, imageUrl string) error {
	query := fmt.Sprintf("update %s set `image_url` = ? where `category_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, imageUrl, categoryId)
	return err
}
