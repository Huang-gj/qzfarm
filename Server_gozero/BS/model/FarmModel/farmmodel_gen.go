// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package FarmModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	farmFieldNames          = builder.RawFieldNames(&Farm{})
	farmRows                = strings.Join(farmFieldNames, ",")
	farmRowsExpectAutoSet   = strings.Join(stringx.Remove(farmFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	farmRowsWithPlaceHolder = strings.Join(stringx.Remove(farmFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	farmModel interface {
		Insert(ctx context.Context, data *Farm) (sql.Result, error)
		FindOne(ctx context.Context, AdminId int64) (*Farm, error)
		UpdateByFarmId(ctx context.Context, FarmID int64,data *Farm) error
		Delete(ctx context.Context, FarmID int64) error
		UpdateStatus(ctx context.Context, farmId int64, status int64) error
		UpdateLogoUrl(ctx context.Context, farmId int64, logoUrl string) error
		UpdateImageUrls(ctx context.Context, farmId int64, imageUrls []byte) error
		FindOneByFarmID(ctx context.Context, farmId int64) (*Farm, error)
	}

	defaultFarmModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Farm struct {
		Id            int64          `db:"id"`
		DelState      int64          `db:"del_state"`      // 删除状态，0=正常，1=已删除
		DelTime       time.Time      `db:"del_time"`       // 删除时间
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
		FarmId        int64          `db:"farm_id"`        // 分布式唯一ID
		AdminId       int64          `db:"admin_id"`       // 管理员唯一ID
		FarmName      string         `db:"farm_name"`      // 农场名称
		Description   sql.NullString `db:"description"`    // 农场描述
		Address       sql.NullString `db:"address"`        // 详细地址
		LogoUrl       string         `db:"logo_url"`       // 农场logo
		ImageUrls     []byte `db:"image_urls"`     // 农场照片
		ContactPhone  string         `db:"contact_phone"`  // 联系电话
		AverageRating float64        `db:"average_rating"` // 平均评分
		Status        int64          `db:"status"`         // 状态(1=正常营业,0=暂停营业)
	}
)

func newFarmModel(conn sqlx.SqlConn) *defaultFarmModel {
	return &defaultFarmModel{
		conn:  conn,
		table: "`farm`",
	}
}

func (m *defaultFarmModel) Delete(ctx context.Context, FarmID int64) error {
	query := fmt.Sprintf("delete from %s where `farm_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, FarmID)
	return err
}

func (m *defaultFarmModel) FindOne(ctx context.Context, AdminId int64) (*Farm, error) {
	query := fmt.Sprintf("select %s from %s where `admin_id` = ? limit 1", farmRows, m.table)
	var resp Farm
	err := m.conn.QueryRowCtx(ctx, &resp, query, AdminId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFarmModel) Insert(ctx context.Context, data *Farm) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, farmRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.FarmId, data.AdminId, data.FarmName, data.Description, data.Address, data.LogoUrl, data.ImageUrls, data.ContactPhone, data.AverageRating, data.Status)
	return ret, err
}

func (m *defaultFarmModel) UpdateByFarmId(ctx context.Context, farmID int64, data *Farm) error {
	query := fmt.Sprintf(`UPDATE %s SET 
		farm_name = ?, 
		description = ?, 
		address = ?, 
		logo_url = ?, 
		image_urls = ?, 
		contact_phone = ? 
		WHERE farm_id = ?`, m.table)

	_, err := m.conn.ExecCtx(ctx, query,
		data.FarmName,
		data.Description,
		data.Address,
		data.LogoUrl,
		data.ImageUrls,
		data.ContactPhone,
		farmID,
	)
	return err
}




func (m *defaultFarmModel) UpdateStatus(ctx context.Context, farmId int64, status int64) error {
	query := fmt.Sprintf("update %s set `status` = ? where `farm_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, farmId)
	return err
}

func (m *defaultFarmModel) tableName() string {
	return m.table
}

func (m *defaultFarmModel) UpdateLogoUrl(ctx context.Context, farmId int64, logoUrl string) error {
	query := fmt.Sprintf("update %s set `logo_url` = ? where `farm_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, logoUrl, farmId)
	return err
}

func (m *defaultFarmModel) UpdateImageUrls(ctx context.Context, farmId int64, imageUrls []byte) error {
	query := fmt.Sprintf("update %s set `image_urls` = ? where `farm_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, imageUrls, farmId)
	return err
}

func (m *defaultFarmModel) FindOneByFarmID(ctx context.Context, farmId int64) (*Farm, error) {
	query := fmt.Sprintf("select %s from %s where `farm_id` = ? limit 1", farmRows, m.table)
	var resp Farm
	err := m.conn.QueryRowCtx(ctx, &resp, query, farmId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
