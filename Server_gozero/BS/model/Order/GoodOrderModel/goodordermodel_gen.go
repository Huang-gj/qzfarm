// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package GoodOrderModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodOrderFieldNames          = builder.RawFieldNames(&GoodOrder{})
	goodOrderRows                = strings.Join(goodOrderFieldNames, ",")
	goodOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(goodOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(goodOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodOrderModel interface {
		Insert(ctx context.Context, data *GoodOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodOrder, error)
		Update(ctx context.Context, data *GoodOrder) error
		Delete(ctx context.Context, id int64) error
		FindAllByFarmID(ctx context.Context, farmId int64) ([]*GoodOrder, error)
	}

	defaultGoodOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodOrder struct {
		Id          int64          `db:"id"`
		DelState    int64          `db:"del_state"`     // 0-正常 1-删除
		DelTime     time.Time      `db:"del_time"`      // 创建时间
		CreateTime  time.Time      `db:"create_time"`   // 删除时间
		GoodOrderId int64          `db:"good_order_id"` // 分布式唯一ID
		ImageUrls   sql.NullString `db:"image_urls"`    // 图片信息
		GoodId      int64          `db:"good_id"`       // 关联商品名称
		FarmId      int64          `db:"farm_id"`       // 商品所属农场id
		UserId      int64          `db:"user_id"`       // 关联用户id
		UserAddress string         `db:"user_address"`  // 用户所在地址
		FarmAddress string         `db:"farm_address"`  // 农场所在地址
		Price       float64        `db:"price"`         // 价格
		Units       string         `db:"units"`         // 单位,个/斤/千克等
		Count       int64          `db:"count"`         // 购买数量
		Detail      sql.NullString `db:"detail"`        // 详情
		OrderStatus string         `db:"order_status"`  // 订单状态
	}
)

func newGoodOrderModel(conn sqlx.SqlConn) *defaultGoodOrderModel {
	return &defaultGoodOrderModel{
		conn:  conn,
		table: "`good_order`",
	}
}

func (m *defaultGoodOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodOrderModel) FindOne(ctx context.Context, id int64) (*GoodOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodOrderRows, m.table)
	var resp GoodOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodOrderModel) Insert(ctx context.Context, data *GoodOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.GoodOrderId, data.ImageUrls, data.GoodId, data.FarmId, data.UserId, data.UserAddress, data.FarmAddress, data.Price, data.Units, data.Count, data.Detail, data.OrderStatus)
	return ret, err
}

func (m *defaultGoodOrderModel) Update(ctx context.Context, data *GoodOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.GoodOrderId, data.ImageUrls, data.GoodId, data.FarmId, data.UserId, data.UserAddress, data.FarmAddress, data.Price, data.Units, data.Count, data.Detail, data.OrderStatus, data.Id)
	return err
}

func (m *defaultGoodOrderModel) FindAllByFarmID(ctx context.Context, farmId int64) ([]*GoodOrder, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `farm_id` = ?", goodOrderRows, m.table)

	var results []*GoodOrder
	err := m.conn.QueryRowsCtx(ctx, &results, query, farmId)
	if err != nil {
		return nil, err
	}

	return results, nil
}

func (m *defaultGoodOrderModel) tableName() string {
	return m.table
}
