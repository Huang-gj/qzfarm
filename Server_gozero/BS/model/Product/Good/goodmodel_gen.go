// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package Good

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodFieldNames          = builder.RawFieldNames(&Good{})
	goodRows                = strings.Join(goodFieldNames, ",")
	goodRowsExpectAutoSet   = strings.Join(stringx.Remove(goodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodRowsWithPlaceHolder = strings.Join(stringx.Remove(goodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodModel interface {
		Insert(ctx context.Context, data *Good) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Good, error)
		Update(ctx context.Context, data *Good) error
		Delete(ctx context.Context, FarmID int64,GoodID int64) error
		FindAllByFarmID(ctx context.Context, farmID int64) ([]*Good, error)
		UpdateImageURL(ctx context.Context, goodID int64, imageUrls []byte) error
	}

	defaultGoodModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Good struct {
		Id         int64          `db:"id"`
		DelState   int64          `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time      `db:"del_time"`    // 创建时间
		CreateTime time.Time      `db:"create_time"` // 删除时间
		GoodId     int64          `db:"good_id"`     // 分布式唯一ID
		Title      string         `db:"title"`       // 商品名称
		GoodTag    string         `db:"good_tag"`    // 商品标签
		FarmId     int64          `db:"farm_id"`     // 商品所属农场id
		ImageUrls  []byte`db:"image_urls"`  // 图片信息
		Price      float64        `db:"price"`       // 价格
		Units      string         `db:"units"`       // 单位,个/斤/千克等
		Repertory  int64          `db:"repertory"`   // 库存
		Detail     sql.NullString `db:"detail"`      // 详情
	}
)

func newGoodModel(conn sqlx.SqlConn) *defaultGoodModel {
	return &defaultGoodModel{
		conn:  conn,
		table: "`good`",
	}
}

func (m *defaultGoodModel) Delete(ctx context.Context, farmID int64, goodID int64) error {
	query := fmt.Sprintf("delete from %s where `farm_id` = ? and `good_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, farmID, goodID)
	return err
}

func (m *defaultGoodModel) FindOne(ctx context.Context, id int64) (*Good, error) {
	query := fmt.Sprintf("select %s from %s where `good_id` = ? limit 1", goodRows, m.table)
	var resp Good
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodModel) Insert(ctx context.Context, data *Good) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.GoodId, data.Title, data.GoodTag, data.FarmId, data.ImageUrls, data.Price, data.Units, data.Repertory, data.Detail)
	return ret, err
}

func (m *defaultGoodModel) Update(ctx context.Context, data *Good) error {
	query := fmt.Sprintf(
		"update %s set `good_id`=?, `title`=?, `good_tag`=?, `farm_id`=?, `image_urls`=?, `price`=?, `units`=?, `repertory`=?, `detail`=? where `good_id`=?",
		m.table,
	)

	_, err := m.conn.ExecCtx(
		ctx,
		query,
		data.GoodId,
		data.Title,
		data.GoodTag,
		data.FarmId,
		data.ImageUrls,
		data.Price,
		data.Units,
		data.Repertory,
		data.Detail,
		data.GoodId, // where 条件
	)

	return err
}

func (m *defaultGoodModel) FindAllByFarmID(ctx context.Context, farmID int64) ([]*Good, error) {
	query := fmt.Sprintf("select %s from %s where `farm_id` = ?", goodRows, m.table)
	var resp []*Good
	err := m.conn.QueryRowsCtx(ctx, &resp, query, farmID)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodModel) UpdateImageURL(ctx context.Context, goodID int64, imageUrls []byte) error {
	query := fmt.Sprintf("update %s set `image_urls` = ? where `good_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, imageUrls, goodID)
	return err
}

func (m *defaultGoodModel) tableName() string {
	return m.table
}
