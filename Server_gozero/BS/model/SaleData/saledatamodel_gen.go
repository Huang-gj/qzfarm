// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package SaleData

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	saleDataFieldNames          = builder.RawFieldNames(&SaleData{})
	saleDataRows                = strings.Join(saleDataFieldNames, ",")
	saleDataRowsExpectAutoSet   = strings.Join(stringx.Remove(saleDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	saleDataRowsWithPlaceHolder = strings.Join(stringx.Remove(saleDataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheQzfSaleDataIdPrefix = "cache:qzf:saleData:id:"
)

type (
	saleDataModel interface {
		Insert(ctx context.Context, data *SaleData) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SaleData, error)
		Update(ctx context.Context, data *SaleData) error
		Delete(ctx context.Context, id int64) error
		FindAll(ctx context.Context, farmId int64) ([]*SaleData, error)
		FindByDateRange(ctx context.Context, farmId int64, startDate, endDate time.Time) ([]*SaleData, error)
		UpdateUserCount(ctx context.Context, num int64) error
		AddLandData(ctx context.Context, farmId int64, landSaleCount float64) error
		AddGoodData(ctx context.Context, farmId int64, goodSaleCount float64) error
	}

	defaultSaleDataModel struct {
		sqlc.CachedConn
		table string
	}

	SaleData struct {
		Id             int64     `db:"id"`
		DelState       int64     `db:"del_state"`        // 0-正常 1-删除
		DelTime        time.Time `db:"del_time"`         // 创建时间
		CreateTime     time.Time `db:"create_time"`      // 删除时间
		FarmId         int64     `db:"farm_id"`          // 关联农场id
		StatDate       time.Time `db:"stat_date"`        // 统计日期
		GoodOrderCount int64     `db:"good_order_count"` // 农产品订单总数
		LandOrderCount int64     `db:"land_order_count"` // 土地订单总数
		GoodSaleCount  float64   `db:"good_sale_count"`  // 农产品订单总销售额
		LandSaleCount  float64   `db:"land_sale_count"`  // 土地订单总销售额
		SysUseCount    int64     `db:"sys_use_count"`    // 当前系统适用人数
	}
)

func newSaleDataModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultSaleDataModel {
	return &defaultSaleDataModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`sale_data`",
	}
}

func (m *defaultSaleDataModel) Delete(ctx context.Context, id int64) error {
	qzfSaleDataIdKey := fmt.Sprintf("%s%v", cacheQzfSaleDataIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, qzfSaleDataIdKey)
	return err
}

func (m *defaultSaleDataModel) FindOne(ctx context.Context, id int64) (*SaleData, error) {
	qzfSaleDataIdKey := fmt.Sprintf("%s%v", cacheQzfSaleDataIdPrefix, id)
	var resp SaleData
	err := m.QueryRowCtx(ctx, &resp, qzfSaleDataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", saleDataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSaleDataModel) Insert(ctx context.Context, data *SaleData) (sql.Result, error) {
	qzfSaleDataIdKey := fmt.Sprintf("%s%v", cacheQzfSaleDataIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, saleDataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.FarmId, data.StatDate, data.GoodOrderCount, data.LandOrderCount, data.GoodSaleCount, data.LandSaleCount, data.SysUseCount)
	}, qzfSaleDataIdKey)
	return ret, err
}

func (m *defaultSaleDataModel) Update(ctx context.Context, data *SaleData) error {
	qzfSaleDataIdKey := fmt.Sprintf("%s%v", cacheQzfSaleDataIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, saleDataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.FarmId, data.StatDate, data.GoodOrderCount, data.LandOrderCount, data.GoodSaleCount, data.LandSaleCount, data.SysUseCount, data.Id)
	}, qzfSaleDataIdKey)
	return err
}

func (m *defaultSaleDataModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheQzfSaleDataIdPrefix, primary)
}

func (m *defaultSaleDataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", saleDataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

// FindAll 根据 farmId 查询所有销售数据
func (m *defaultSaleDataModel) FindAll(ctx context.Context, farmId int64) ([]*SaleData, error) {
	var resp []*SaleData
	query := fmt.Sprintf("select %s from %s where `farm_id` = ?", saleDataRows, m.table)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, farmId)
	if err != nil {
		if err == sqlc.ErrNotFound {
			return nil, nil
		}
		return nil, err
	}
	return resp, nil
}

// FindByDateRange 根据 farmId + 日期范围查询销售数据
func (m *defaultSaleDataModel) FindByDateRange(ctx context.Context, farmId int64, startDate, endDate time.Time) ([]*SaleData, error) {
	var resp []*SaleData
	query := fmt.Sprintf(
		"select %s from %s where `farm_id` = ? and `stat_date` between ? and ?",
		saleDataRows,
		m.table,
	)
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, farmId, startDate, endDate)
	if err != nil {
		if err == sqlc.ErrNotFound {
			return nil, nil
		}
		return nil, err
	}
	return resp, nil
}

// UpdateUserCount 将今天的所有 SysUseCount 更新为指定值
func (m *defaultSaleDataModel) UpdateUserCount(ctx context.Context, num int64) error {
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set `sys_use_count` = ? where `stat_date` = CURDATE()", m.table)
		return conn.ExecCtx(ctx, query, num)
	})
	return err
}

// AddLandData 给指定农场今天的 LandSaleCount 增加值，同时 LandOrderCount + 1
func (m *defaultSaleDataModel) AddLandData(ctx context.Context, farmId int64, landSaleCount float64) error {
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf(
			"update %s set `land_sale_count` = `land_sale_count` + ?, `land_order_count` = `land_order_count` + 1 "+
				"where `farm_id` = ? and `stat_date` = CURDATE()", m.table)
		return conn.ExecCtx(ctx, query, landSaleCount, farmId)
	})
	return err
}

// AddGoodData 给指定农场今天的 GoodSaleCount 增加值，同时 GoodOrderCount + 1
func (m *defaultSaleDataModel) AddGoodData(ctx context.Context, farmId int64, goodSaleCount float64) error {
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf(
			"update %s set `good_sale_count` = `good_sale_count` + ?, `good_order_count` = `good_order_count` + 1 "+
				"where `farm_id` = ? and `stat_date` = CURDATE()", m.table)
		return conn.ExecCtx(ctx, query, goodSaleCount, farmId)
	})
	return err
}

func (m *defaultSaleDataModel) tableName() string {
	return m.table
}
