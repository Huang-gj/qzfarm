// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: BS.proto

package BSRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BS_AddUser_FullMethodName     = "/BSRPC.BS/addUser"
	BS_AddLandData_FullMethodName = "/BSRPC.BS/addLandData"
	BS_AddGoodData_FullMethodName = "/BSRPC.BS/addGoodData"
)

// BSClient is the client API for BS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BSClient interface {
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	AddLandData(ctx context.Context, in *AddLandDataReq, opts ...grpc.CallOption) (*AddLandDataResp, error)
	AddGoodData(ctx context.Context, in *AddGoodDataReq, opts ...grpc.CallOption) (*AddGoodDataResp, error)
}

type bSClient struct {
	cc grpc.ClientConnInterface
}

func NewBSClient(cc grpc.ClientConnInterface) BSClient {
	return &bSClient{cc}
}

func (c *bSClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, BS_AddUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bSClient) AddLandData(ctx context.Context, in *AddLandDataReq, opts ...grpc.CallOption) (*AddLandDataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddLandDataResp)
	err := c.cc.Invoke(ctx, BS_AddLandData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bSClient) AddGoodData(ctx context.Context, in *AddGoodDataReq, opts ...grpc.CallOption) (*AddGoodDataResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGoodDataResp)
	err := c.cc.Invoke(ctx, BS_AddGoodData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BSServer is the server API for BS service.
// All implementations must embed UnimplementedBSServer
// for forward compatibility.
type BSServer interface {
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	AddLandData(context.Context, *AddLandDataReq) (*AddLandDataResp, error)
	AddGoodData(context.Context, *AddGoodDataReq) (*AddGoodDataResp, error)
	mustEmbedUnimplementedBSServer()
}

// UnimplementedBSServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBSServer struct{}

func (UnimplementedBSServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedBSServer) AddLandData(context.Context, *AddLandDataReq) (*AddLandDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLandData not implemented")
}
func (UnimplementedBSServer) AddGoodData(context.Context, *AddGoodDataReq) (*AddGoodDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodData not implemented")
}
func (UnimplementedBSServer) mustEmbedUnimplementedBSServer() {}
func (UnimplementedBSServer) testEmbeddedByValue()            {}

// UnsafeBSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BSServer will
// result in compilation errors.
type UnsafeBSServer interface {
	mustEmbedUnimplementedBSServer()
}

func RegisterBSServer(s grpc.ServiceRegistrar, srv BSServer) {
	// If the following call pancis, it indicates UnimplementedBSServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BS_ServiceDesc, srv)
}

func _BS_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BS_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BS_AddLandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLandDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServer).AddLandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BS_AddLandData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServer).AddLandData(ctx, req.(*AddLandDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BS_AddGoodData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BSServer).AddGoodData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BS_AddGoodData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BSServer).AddGoodData(ctx, req.(*AddGoodDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BS_ServiceDesc is the grpc.ServiceDesc for BS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BSRPC.BS",
	HandlerType: (*BSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addUser",
			Handler:    _BS_AddUser_Handler,
		},
		{
			MethodName: "addLandData",
			Handler:    _BS_AddLandData_Handler,
		},
		{
			MethodName: "addGoodData",
			Handler:    _BS_AddGoodData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "BS.proto",
}
