// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5

package handler

import (
	"net/http"

	activity "Server_gozero/CS/commodityServer/api/internal/handler/activity"
	attention "Server_gozero/CS/commodityServer/api/internal/handler/attention"
	category "Server_gozero/CS/commodityServer/api/internal/handler/category"
	comment "Server_gozero/CS/commodityServer/api/internal/handler/comment"
	good "Server_gozero/CS/commodityServer/api/internal/handler/good"
	land "Server_gozero/CS/commodityServer/api/internal/handler/land"
	search "Server_gozero/CS/commodityServer/api/internal/handler/search"
	"Server_gozero/CS/commodityServer/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/GetActivityDetail",
				Handler: activity.GetActivityDetailHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetMainPic",
				Handler: activity.GetMainPicHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/AddAttention",
				Handler: attention.AddAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/DelAttention",
				Handler: attention.DelAttentionHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/GetCategory",
				Handler: category.GetCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetFarm",
				Handler: category.GetFarmHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetFarmAttention",
				Handler: category.GetFarmAttentionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/GetFarmCat",
				Handler: category.GetFarmCatHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/addComment",
				Handler: comment.AddCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addCommentReply",
				Handler: comment.AddCommentReplyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getComment",
				Handler: comment.GetCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getCommentPreview",
				Handler: comment.GetCommentPreviewHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getCommentReply",
				Handler: comment.GetCommentReplyHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getAllGoods",
				Handler: good.GetAllGoodsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGood",
				Handler: good.GetGoodHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGoodsByFarmID",
				Handler: good.GetGoodsByFarmIDHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGoodsByTag",
				Handler: good.GetGoodsByTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getAllLands",
				Handler: land.GetAllLandsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getLand",
				Handler: land.GetLandHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getLandsByFarmID",
				Handler: land.GetLandsByFarmIDHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getLandsByTag",
				Handler: land.GetLandsByTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/searchProduct",
				Handler: search.SearchProductHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/commodity"),
	)
}
