// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package attentionModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	attentionFieldNames          = builder.RawFieldNames(&Attention{})
	attentionRows                = strings.Join(attentionFieldNames, ",")
	attentionRowsExpectAutoSet   = strings.Join(stringx.Remove(attentionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	attentionRowsWithPlaceHolder = strings.Join(stringx.Remove(attentionFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	attentionModel interface {
		Insert(ctx context.Context, data *Attention) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Attention, error)
		Update(ctx context.Context, data *Attention) error
		Delete(ctx context.Context, id int64) error
		InsertByUserAndFarm(ctx context.Context, userId, farmId int64) (sql.Result, error)
		DeleteByUserAndFarm(ctx context.Context, userId, farmId int64) error
		FindFarmIdsByUser(ctx context.Context, userId int64) ([]int64, error)
	}

	defaultAttentionModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Attention struct {
		Id         int64     `db:"id"`
		DelState   int64     `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time `db:"del_time"`    // 删除时间
		CreateTime time.Time `db:"create_time"` // 创建时间
		UserId     int64     `db:"user_id"`     // 用户分布式唯一ID
		FarmId     int64     `db:"farm_id"`     // 被关注农场唯一ID
	}
)

func newAttentionModel(conn sqlx.SqlConn) *defaultAttentionModel {
	return &defaultAttentionModel{
		conn:  conn,
		table: "`attention`",
	}
}

func (m *defaultAttentionModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultAttentionModel) FindOne(ctx context.Context, id int64) (*Attention, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", attentionRows, m.table)
	var resp Attention
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAttentionModel) Insert(ctx context.Context, data *Attention) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, attentionRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.UserId, data.FarmId)
	return ret, err
}

func (m *defaultAttentionModel) Update(ctx context.Context, data *Attention) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, attentionRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.UserId, data.FarmId, data.Id)
	return err
}

func (m *defaultAttentionModel) tableName() string {
	return m.table
}

func (m *defaultAttentionModel) InsertByUserAndFarm(ctx context.Context, userId, farmId int64) (sql.Result, error) {
	query := fmt.Sprintf("INSERT INTO %s (del_state, del_time, user_id, farm_id, create_time) VALUES (?, ?, ?, ?, ?)", m.table)
	ret, err := m.conn.ExecCtx(ctx, query, 0, time.Now(), userId, farmId, time.Now())
	return ret, err
}

func (m *defaultAttentionModel) DeleteByUserAndFarm(ctx context.Context, userId, farmId int64) error {
	query := fmt.Sprintf("DELETE FROM %s WHERE user_id = ? AND farm_id = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId, farmId)
	return err
}

func (m *defaultAttentionModel) FindFarmIdsByUser(ctx context.Context, userId int64) ([]int64, error) {
	query := fmt.Sprintf("SELECT farm_id FROM %s WHERE user_id = ?", m.table)
	var farmIds []int64
	err := m.conn.QueryRowsCtx(ctx, &farmIds, query, userId)
	if err != nil {
		return nil, err
	}
	return farmIds, nil
}
