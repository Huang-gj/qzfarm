// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package commentModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, id int64) error
		FindAllByGoodID(ctx context.Context, goodId int64) ([]*Comment, error)
		FindAllByLandID(ctx context.Context, landId int64) ([]*Comment, error)
		IncrCommentReplyNum(ctx context.Context, commentId int64) error
		FindTwoByGoodID(ctx context.Context, goodId int64) ([]*Comment, error)
		FindTwoByLandID(ctx context.Context, landId int64) ([]*Comment, error)
	}

	defaultCommentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Comment struct {
		Id         int64          `db:"id"`
		CreateTime time.Time      `db:"create_time"` // 创建时间
		Text       sql.NullString `db:"text"`        // 评论内容
		CommentId  int64          `db:"comment_id"`  // 评论分布式唯一id
		GoodId     int64          `db:"good_id"`     // 关联商品id
		LandId     int64          `db:"land_id"`     // 关联土地id
		UserId     int64          `db:"user_id"`     // 评论用户id
		Avatar     string         `db:"avatar"`      // 用户头像url
		Nickname   string         `db:"nickname"`    // 用户昵称
		CommentReplyNum int `db:"comment_reply_num"`
	}
)

func newCommentModel(conn sqlx.SqlConn) *defaultCommentModel {
	return &defaultCommentModel{
		conn:  conn,
		table: "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id int64) (*Comment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentRows, m.table)
	var resp Comment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Text, data.CommentId, data.GoodId, data.LandId, data.UserId, data.Avatar, data.Nickname,data.CommentReplyNum)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, data *Comment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Text, data.CommentId, data.GoodId, data.LandId, data.UserId, data.Avatar, data.Nickname, data.Id)
	return err
}

func (m *defaultCommentModel) FindAllByGoodID(ctx context.Context, goodId int64) ([]*Comment, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE good_id = ?", commentRows, m.table)

	var comments []*Comment
	err := m.conn.QueryRowsCtx(ctx, &comments, query, goodId)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

func (m *defaultCommentModel) FindAllByLandID(ctx context.Context, landId int64) ([]*Comment, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE land_id = ?", commentRows, m.table)

	var comments []*Comment
	err := m.conn.QueryRowsCtx(ctx, &comments, query, landId)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

// IncrCommentReplyNum 将指定 CommentID 的 comment_reply_num 字段 +1
func (m *defaultCommentModel) IncrCommentReplyNum(ctx context.Context, commentId int64) error {
	query := fmt.Sprintf("UPDATE %s SET comment_reply_num = comment_reply_num + 1 WHERE comment_id = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, commentId)
	return err
}

// FindTwoByGoodID 根据 good_id 查询最新两条评论
func (m *defaultCommentModel) FindTwoByGoodID(ctx context.Context, goodId int64) ([]*Comment, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE good_id = ? ORDER BY create_time DESC LIMIT 2", commentRows, m.table)

	var comments []*Comment
	err := m.conn.QueryRowsCtx(ctx, &comments, query, goodId)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

// FindTwoByLandID 根据 land_id 查询最新两条评论
func (m *defaultCommentModel) FindTwoByLandID(ctx context.Context, landId int64) ([]*Comment, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE land_id = ? ORDER BY create_time DESC LIMIT 2", commentRows, m.table)

	var comments []*Comment
	err := m.conn.QueryRowsCtx(ctx, &comments, query, landId)
	if err != nil {
		return nil, err
	}
	return comments, nil
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}
