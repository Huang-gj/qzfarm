// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package commentReplyModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentReplyFieldNames          = builder.RawFieldNames(&CommentReply{})
	commentReplyRows                = strings.Join(commentReplyFieldNames, ",")
	commentReplyRowsExpectAutoSet   = strings.Join(stringx.Remove(commentReplyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentReplyRowsWithPlaceHolder = strings.Join(stringx.Remove(commentReplyFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	commentReplyModel interface {
		Insert(ctx context.Context, data *CommentReply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CommentReply, error)
		Update(ctx context.Context, data *CommentReply) error
		Delete(ctx context.Context, id int64) error
		FindAllByCommentID(ctx context.Context, commentId int64) ([]*CommentReply, int64, error)
	}

	defaultCommentReplyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CommentReply struct {
		Id             int64          `db:"id"`
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		CommentId      int64          `db:"comment_id"`       // 关联根评论ID
		CommentReplyId int64          `db:"comment_reply_id"` // 评论回复分布式唯一ID
		ReplyTo        string         `db:"reply_to"`         // 被评论者的ID
		Text           sql.NullString `db:"text"`             // 评论内容
		UserId         int64          `db:"user_id"`          // 评论用户id
		Avatar         string         `db:"avatar"`           // 用户头像url
		Nickname       string         `db:"nickname"`         // 用户昵称
	}
)

func newCommentReplyModel(conn sqlx.SqlConn) *defaultCommentReplyModel {
	return &defaultCommentReplyModel{
		conn:  conn,
		table: "`comment_reply`",
	}
}

func (m *defaultCommentReplyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCommentReplyModel) FindOne(ctx context.Context, id int64) (*CommentReply, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentReplyRows, m.table)
	var resp CommentReply
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentReplyModel) Insert(ctx context.Context, data *CommentReply) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, commentReplyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.CommentId, data.CommentReplyId, data.ReplyTo, data.Text, data.UserId, data.Avatar, data.Nickname)
	return ret, err
}

func (m *defaultCommentReplyModel) Update(ctx context.Context, data *CommentReply) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentReplyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.CommentId, data.CommentReplyId, data.ReplyTo, data.Text, data.UserId, data.Avatar, data.Nickname, data.Id)
	return err
}
func (m *defaultCommentReplyModel) FindAllByCommentID(ctx context.Context, commentId int64) ([]*CommentReply, int64, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE comment_id = ?", commentReplyRows, m.table)

	var replies []*CommentReply
	err := m.conn.QueryRowsCtx(ctx, &replies, query, commentId)
	if err != nil {
		return nil, 0, err
	}

	// 获取数量
	num := int64(len(replies))

	return replies, num, nil
}



func (m *defaultCommentReplyModel) tableName() string {
	return m.table
}
