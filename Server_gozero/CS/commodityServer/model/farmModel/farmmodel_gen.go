// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.5

package farmModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	farmFieldNames          = builder.RawFieldNames(&Farm{})
	farmRows                = strings.Join(farmFieldNames, ",")
	farmRowsExpectAutoSet   = strings.Join(stringx.Remove(farmFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	farmRowsWithPlaceHolder = strings.Join(stringx.Remove(farmFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	farmModel interface {
		Insert(ctx context.Context, data *Farm) (sql.Result, error)
		FindOne(ctx context.Context, farm_id int64) (*Farm, error)
		Update(ctx context.Context, data *Farm) error
		Delete(ctx context.Context, id int64) error
		FindAllFarmBasic(ctx context.Context) ([]*FarmBasic, error)
	}

	defaultFarmModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Farm struct {
		Id            int64          `db:"id"`
		DelState      int64          `db:"del_state"`      // 删除状态，0=正常，1=已删除
		DelTime       time.Time      `db:"del_time"`       // 删除时间
		CreateTime    time.Time      `db:"create_time"`    // 创建时间
		FarmId        int64          `db:"farm_id"`        // 分布式唯一ID
		AdminId       int64          `db:"admin_id"`       // 管理员唯一ID
		FarmName      string         `db:"farm_name"`      // 农场名称
		Description   string `db:"description"`    // 农场描述
		Address       string `db:"address"`        // 详细地址
		LogoUrl       string         `db:"logo_url"`       // 农场logo
		ImageUrls     []byte `db:"image_urls"`     // 农场照片
		ContactPhone  string         `db:"contact_phone"`  // 联系电话
		AverageRating float64        `db:"average_rating"` // 平均评分
		Status        int64          `db:"status"`         // 状态(1=暂停营业,0=正常营业)
	}
)

func newFarmModel(conn sqlx.SqlConn) *defaultFarmModel {
	return &defaultFarmModel{
		conn:  conn,
		table: "`farm`",
	}
}

func (m *defaultFarmModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultFarmModel) FindOne(ctx context.Context, farm_id int64) (*Farm, error) {
	query := fmt.Sprintf("select %s from %s where `farm_id` = ? limit 1", farmRows, m.table)
	var resp Farm
	err := m.conn.QueryRowCtx(ctx, &resp, query, farm_id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultFarmModel) Insert(ctx context.Context, data *Farm) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, farmRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.FarmId, data.AdminId, data.FarmName, data.Description, data.Address, data.LogoUrl, data.ImageUrls, data.ContactPhone, data.AverageRating, data.Status)
	return ret, err
}

func (m *defaultFarmModel) Update(ctx context.Context, data *Farm) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, farmRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.FarmId, data.AdminId, data.FarmName, data.Description, data.Address, data.LogoUrl, data.ImageUrls, data.ContactPhone, data.AverageRating, data.Status, data.Id)
	return err
}

func (m *defaultFarmModel) tableName() string {
	return m.table
}

// FarmBasic 定义只包含三个字段的结构体
type FarmBasic struct {
	FarmId   int64  `db:"farm_id"`   // 分布式唯一ID
	FarmName string `db:"farm_name"` // 农场名称
	LogoUrl  string `db:"logo_url"`  // 农场logo
}

// FindAllFarmBasic 查询所有农场的基础信息
func (m *defaultFarmModel) FindAllFarmBasic(ctx context.Context) ([]*FarmBasic, error) {
	query := fmt.Sprintf("select `farm_id`, `farm_name`, `logo_url` from %s", m.table)
	var resp []*FarmBasic
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	if err != nil {
		return nil, err
	}
	return resp, nil
}
