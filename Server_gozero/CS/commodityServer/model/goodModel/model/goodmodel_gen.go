// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodFieldNames          = builder.RawFieldNames(&Good{})
	goodRows                = strings.Join(goodFieldNames, ",")
	goodRowsExpectAutoSet   = strings.Join(stringx.Remove(goodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	goodRowsWithPlaceHolder = strings.Join(stringx.Remove(goodFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	goodModel interface {
		Insert(ctx context.Context, data *Good) (sql.Result, error)
		FindAll(ctx context.Context) ([]*Good, error)
		FindAllByGoodTag(ctx context.Context, goodTag string) ([]*Good, error)
		FindOne(ctx context.Context, id int64) (*Good, error)
		Update(ctx context.Context, data *Good) error
		Delete(ctx context.Context, id int64) error
		UpdateRepertory(ctx context.Context, goodId int64, repertory int64) error
		FindAllByKeyword(ctx context.Context, keyword string) ([]*Good, error)
}

	defaultGoodModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Good struct {
		Id         int64          `db:"id"`
		DelState   int64          `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time      `db:"del_time"`    // 创建时间
		CreateTime time.Time      `db:"create_time"` // 删除时间
		GoodId     int64          `db:"good_id"`     // 分布式唯一ID
		Title      string         `db:"title"`       // 商品名称
		GoodTag    string         `db:"good_tag"`    // 商品标签
		FarmId     int64          `db:"farm_id"`     // 商品所属农场id
		ImageUrls  []byte `db:"image_urls"`  // 图片信息
		Price      float64        `db:"price"`       // 价格
		Units      string         `db:"units"`       // 单位,个/斤/千克等
		Repertory  int64        `db:"repertory"`   // 库存
		Detail     sql.NullString `db:"detail"`      // 详情
	}
)

func newGoodModel(conn sqlx.SqlConn) *defaultGoodModel {
	return &defaultGoodModel{
		conn:  conn,
		table: "`good`",
	}
}

func (m *defaultGoodModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodModel) FindAll(ctx context.Context) ([]*Good, error) {
	query := fmt.Sprintf("SELECT %s FROM %s", goodRows, m.table)

	var goods []*Good
	err := m.conn.QueryRowsCtx(ctx, &goods, query)
	if err != nil {
		return nil, err
	}
	return goods, nil
}


func (m *defaultGoodModel) Insert(ctx context.Context, data *Good) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.GoodId, data.Title, data.GoodTag, data.FarmId, data.ImageUrls, data.Price, data.Units, data.Repertory, data.Detail)
	return ret, err
}

func (m *defaultGoodModel) Update(ctx context.Context, data *Good) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.GoodId, data.Title, data.GoodTag, data.FarmId, data.ImageUrls, data.Price, data.Units, data.Repertory, data.Detail, data.Id)
	return err
}

func (m *defaultGoodModel) tableName() string {
	return m.table
}

func (m *defaultGoodModel) FindOne(ctx context.Context, id int64) (*Good, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE good_id = ? LIMIT 1", goodRows, m.table)

	var resp Good
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodModel) FindAllByGoodTag(ctx context.Context, goodTag string) ([]*Good, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE good_tag = ?", goodRows, m.table)

	var goods []*Good
	err := m.conn.QueryRowsCtx(ctx, &goods, query, goodTag)
	if err != nil {
		return nil, err
	}
	return goods, nil
}

func (m *defaultGoodModel) UpdateRepertory(ctx context.Context, goodId int64, repertory int64) error {
	query := fmt.Sprintf("UPDATE %s SET repertory = ? WHERE good_id = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, repertory, goodId)
	return err
}

func (m *defaultGoodModel) FindAllByKeyword(ctx context.Context, keyword string) ([]*Good, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE title LIKE ? OR good_tag LIKE ?", goodRows, m.table)
	likePattern := "%" + keyword + "%"

	var goods []*Good
	err := m.conn.QueryRowsCtx(ctx, &goods, query, likePattern, likePattern)
	if err != nil {
		return nil, err
	}
	return goods, nil
}
