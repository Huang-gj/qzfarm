// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	landFieldNames          = builder.RawFieldNames(&Land{})
	landRows                = strings.Join(landFieldNames, ",")
	landRowsExpectAutoSet   = strings.Join(stringx.Remove(landFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	landRowsWithPlaceHolder = strings.Join(stringx.Remove(landFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	landModel interface {
		Insert(ctx context.Context, data *Land) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Land, error)
		Update(ctx context.Context, data *Land) error
		Delete(ctx context.Context, id int64) error
		GetAllLand(ctx context.Context) ([]*Land, error)
		GetLandByTag(ctx context.Context, landTag string) ([]*Land, error)
		UpdateStatus(ctx context.Context, landId int64, status int64) error
		GetLandByKeyword(ctx context.Context, keyword string) ([]*Land, error)

	}

	defaultLandModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Land struct {
		Id         int64          `db:"id"`
		DelState   int64          `db:"del_state"`   // 0-正常 1-删除
		DelTime    time.Time      `db:"del_time"`    // 创建时间
		CreateTime time.Time      `db:"create_time"` // 删除时间
		LandId     int64          `db:"land_id"`     // 分布式唯一ID
		FarmId     int64          `db:"farm_id"`     // 土地所属农场id
		LandName   string         `db:"land_name"`   // 土地名称
		LandTag    string         `db:"land_tag"`    // 土地类型
		Area       string         `db:"area"`        // 土地面积
		ImageUrls  []byte `db:"image_urls"`  // 图片信息
		Price      float64        `db:"price"`       // 价格
		Detail     sql.NullString `db:"detail"`      // 详情
		SaleStatus int64          `db:"sale_status"` // 租赁状态 0-出售中 1-已被租赁
		SaleTime   time.Time      `db:"sale_time"`   // 租赁剩余时间
	}
)

func newLandModel(conn sqlx.SqlConn) *defaultLandModel {
	return &defaultLandModel{
		conn:  conn,
		table: "`land`",
	}
}

func (m *defaultLandModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLandModel) FindOne(ctx context.Context, id int64) (*Land, error) {
	query := fmt.Sprintf("select %s from %s where `land_id` = ? limit 1", landRows, m.table)
	var resp Land
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLandModel) Insert(ctx context.Context, data *Land) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, landRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.LandId, data.FarmId, data.LandName, data.LandTag, data.Area, data.ImageUrls, data.Price, data.Detail, data.SaleStatus, data.SaleTime)
	return ret, err
}

func (m *defaultLandModel) Update(ctx context.Context, data *Land) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, landRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.LandId, data.FarmId, data.LandName, data.LandTag, data.Area, data.ImageUrls, data.Price, data.Detail, data.SaleStatus, data.SaleTime, data.Id)
	return err
}

func (m *defaultLandModel) tableName() string {
	return m.table
}

func (m *defaultLandModel) GetLandByTag(ctx context.Context, landTag string) ([]*Land, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE `land_tag` = ?", landRows, m.table)

	var lands []*Land
	err := m.conn.QueryRowsCtx(ctx, &lands, query, landTag)
	if err != nil {
		return nil, err
	}
	return lands, nil
}

func (m *defaultLandModel) GetAllLand(ctx context.Context) ([]*Land, error) {
	query := fmt.Sprintf("SELECT %s FROM %s", landRows, m.table)

	var lands []*Land
	err := m.conn.QueryRowsCtx(ctx, &lands, query)
	if err != nil {
		return nil, err
	}
	return lands, nil
}

func (m *defaultLandModel) UpdateStatus(ctx context.Context, landId int64, status int64) error {
	query := fmt.Sprintf("UPDATE %s SET sale_status = ? WHERE land_id = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, status, landId)
	return err
}

func (m *defaultLandModel) GetLandByKeyword(ctx context.Context, keyword string) ([]*Land, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE land_name LIKE ? OR land_tag LIKE ?", landRows, m.table)
	likePattern := "%" + keyword + "%"

	var lands []*Land
	err := m.conn.QueryRowsCtx(ctx, &lands, query, likePattern, likePattern)
	if err != nil {
		return nil, err
	}
	return lands, nil
}
