// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: commodity.proto

package commodity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Commodity_GetGood_FullMethodName      = "/commodity.commodity/getGood"
	Commodity_UpdateRep_FullMethodName    = "/commodity.commodity/updateRep"
	Commodity_GetLand_FullMethodName      = "/commodity.commodity/getLand"
	Commodity_UpdateStatus_FullMethodName = "/commodity.commodity/updateStatus"
)

// CommodityClient is the client API for Commodity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommodityClient interface {
	GetGood(ctx context.Context, in *GetGoodRepReq, opts ...grpc.CallOption) (*GetGoodRepResp, error)
	UpdateRep(ctx context.Context, in *UpdateRepReq, opts ...grpc.CallOption) (*UpdateRepResp, error)
	GetLand(ctx context.Context, in *GetLandRepReq, opts ...grpc.CallOption) (*GetLandRepResp, error)
	UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error)
}

type commodityClient struct {
	cc grpc.ClientConnInterface
}

func NewCommodityClient(cc grpc.ClientConnInterface) CommodityClient {
	return &commodityClient{cc}
}

func (c *commodityClient) GetGood(ctx context.Context, in *GetGoodRepReq, opts ...grpc.CallOption) (*GetGoodRepResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGoodRepResp)
	err := c.cc.Invoke(ctx, Commodity_GetGood_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateRep(ctx context.Context, in *UpdateRepReq, opts ...grpc.CallOption) (*UpdateRepResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRepResp)
	err := c.cc.Invoke(ctx, Commodity_UpdateRep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) GetLand(ctx context.Context, in *GetLandRepReq, opts ...grpc.CallOption) (*GetLandRepResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLandRepResp)
	err := c.cc.Invoke(ctx, Commodity_GetLand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityClient) UpdateStatus(ctx context.Context, in *UpdateStatusReq, opts ...grpc.CallOption) (*UpdateStatusResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStatusResp)
	err := c.cc.Invoke(ctx, Commodity_UpdateStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommodityServer is the server API for Commodity service.
// All implementations must embed UnimplementedCommodityServer
// for forward compatibility.
type CommodityServer interface {
	GetGood(context.Context, *GetGoodRepReq) (*GetGoodRepResp, error)
	UpdateRep(context.Context, *UpdateRepReq) (*UpdateRepResp, error)
	GetLand(context.Context, *GetLandRepReq) (*GetLandRepResp, error)
	UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusResp, error)
	mustEmbedUnimplementedCommodityServer()
}

// UnimplementedCommodityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommodityServer struct{}

func (UnimplementedCommodityServer) GetGood(context.Context, *GetGoodRepReq) (*GetGoodRepResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGood not implemented")
}
func (UnimplementedCommodityServer) UpdateRep(context.Context, *UpdateRepReq) (*UpdateRepResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRep not implemented")
}
func (UnimplementedCommodityServer) GetLand(context.Context, *GetLandRepReq) (*GetLandRepResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLand not implemented")
}
func (UnimplementedCommodityServer) UpdateStatus(context.Context, *UpdateStatusReq) (*UpdateStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatus not implemented")
}
func (UnimplementedCommodityServer) mustEmbedUnimplementedCommodityServer() {}
func (UnimplementedCommodityServer) testEmbeddedByValue()                   {}

// UnsafeCommodityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommodityServer will
// result in compilation errors.
type UnsafeCommodityServer interface {
	mustEmbedUnimplementedCommodityServer()
}

func RegisterCommodityServer(s grpc.ServiceRegistrar, srv CommodityServer) {
	// If the following call pancis, it indicates UnimplementedCommodityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Commodity_ServiceDesc, srv)
}

func _Commodity_GetGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodRepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).GetGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commodity_GetGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).GetGood(ctx, req.(*GetGoodRepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateRep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateRep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commodity_UpdateRep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateRep(ctx, req.(*UpdateRepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_GetLand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLandRepReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).GetLand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commodity_GetLand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).GetLand(ctx, req.(*GetLandRepReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commodity_UpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommodityServer).UpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Commodity_UpdateStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommodityServer).UpdateStatus(ctx, req.(*UpdateStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Commodity_ServiceDesc is the grpc.ServiceDesc for Commodity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commodity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commodity.commodity",
	HandlerType: (*CommodityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getGood",
			Handler:    _Commodity_GetGood_Handler,
		},
		{
			MethodName: "updateRep",
			Handler:    _Commodity_UpdateRep_Handler,
		},
		{
			MethodName: "getLand",
			Handler:    _Commodity_GetLand_Handler,
		},
		{
			MethodName: "updateStatus",
			Handler:    _Commodity_UpdateStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commodity.proto",
}
