// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package LandOrderModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	landOrderFieldNames          = builder.RawFieldNames(&LandOrder{})
	landOrderRows                = strings.Join(landOrderFieldNames, ",")
	landOrderRowsExpectAutoSet   = strings.Join(stringx.Remove(landOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	landOrderRowsWithPlaceHolder = strings.Join(stringx.Remove(landOrderFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	landOrderModel interface {
		Insert(ctx context.Context, data *LandOrder) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LandOrder, error)
		Update(ctx context.Context, data *LandOrder) error
		Delete(ctx context.Context, id int64) error
		FindOneByUIDAndOID(ctx context.Context, userId, landOrderId int64) (*LandOrder, error)
		FindAll(ctx context.Context, userId int64) ([]*LandOrder, error)
		FindOneByUidAndStatus(ctx context.Context, userId int64, orderStatus string) ([]*LandOrder, error)
		UpdateOrderCount(ctx context.Context, userId, landOrderId, newCount int64) error
		DeleteSoft(ctx context.Context, userId, landOrderId int64) error
		UpdateOrderStatus(ctx context.Context, landOrderId int64) error
	}

	defaultLandOrderModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LandOrder struct {
		Id          int64          `db:"id"`
		DelState    int64          `db:"del_state"`     // 0-正常 1-删除
		DelTime     time.Time      `db:"del_time"`      // 创建时间
		CreateTime  time.Time      `db:"create_time"`   // 删除时间
		LandOrderId int64          `db:"land_order_id"` // 分布式唯一ID
		ImageUrls   sql.NullString `db:"image_urls"`    // 图片信息
		LandId      int64          `db:"land_id"`       // 关联土地名称
		FarmId      int64          `db:"farm_id"`       // 商品所属农场id
		UserId      int64          `db:"user_id"`       // 关联用户id
		FarmAddress string         `db:"farm_address"`  // 农场所在地址
		Price       float64        `db:"price"`         // 价格
		Count       int64          `db:"count"`         // 租赁时长
		Detail      sql.NullString `db:"detail"`        // 详情
		OrderStatus string         `db:"order_status"`  // 订单状态
	}
)

func newLandOrderModel(conn sqlx.SqlConn) *defaultLandOrderModel {
	return &defaultLandOrderModel{
		conn:  conn,
		table: "`land_order`",
	}
}

func (m *defaultLandOrderModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `land_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLandOrderModel) FindOne(ctx context.Context, id int64) (*LandOrder, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", landOrderRows, m.table)
	var resp LandOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLandOrderModel) Insert(ctx context.Context, data *LandOrder) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, landOrderRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.LandOrderId, data.ImageUrls, data.LandId, data.FarmId, data.UserId, data.FarmAddress, data.Price, data.Count, data.Detail, data.OrderStatus)
	return ret, err
}

func (m *defaultLandOrderModel) Update(ctx context.Context, data *LandOrder) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, landOrderRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.LandOrderId, data.ImageUrls, data.LandId, data.FarmId, data.UserId, data.FarmAddress, data.Price, data.Count, data.Detail, data.OrderStatus, data.Id)
	return err
}

func (m *defaultLandOrderModel) tableName() string {
	return m.table
}

func (m *defaultLandOrderModel) FindAll(ctx context.Context, userId int64) ([]*LandOrder, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ?", landOrderRows, m.table)
	var resp []*LandOrder
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultLandOrderModel) FindOneByUIDAndOID(ctx context.Context, userId, landOrderId int64) (*LandOrder, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `land_order_id` = ? limit 1", landOrderRows, m.table)
	var resp LandOrder
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, landOrderId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLandOrderModel) FindOneByUidAndStatus(ctx context.Context, userId int64, orderStatus string) ([]*LandOrder, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `order_status` = ?", landOrderRows, m.table)
	var resp []*LandOrder
	err := m.conn.QueryRowsCtx(ctx, &resp, query, userId, orderStatus)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

func (m *defaultLandOrderModel) UpdateOrderCount(ctx context.Context, userId, landOrderId, newCount int64) error {
	query := fmt.Sprintf("update %s set `count` = ? where `user_id` = ? and `land_order_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, newCount, userId, landOrderId)
	return err
}

func (m *defaultLandOrderModel) DeleteSoft(ctx context.Context, userId, landOrderId int64) error {
	query := fmt.Sprintf("update %s set `del_state` = 1, `del_time` = ? where `user_id` = ? and `land_order_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, time.Now(), userId, landOrderId)
	return err
}

func (m *defaultLandOrderModel) UpdateOrderStatus(ctx context.Context, landOrderId int64) error {
	// 先检查订单是否存在
	queryCheck := fmt.Sprintf("select count(1) from %s where `land_order_id` = ?", m.table)
	var count int
	err := m.conn.QueryRowCtx(ctx, &count, queryCheck, landOrderId)
	if err != nil {
		return err
	}

	if count == 0 {
		return ErrNotFound
	}

	// 更新订单状态为待发货
	query := fmt.Sprintf("update %s set `order_status` = ? where `land_order_id` = ?", m.table)
	_, err = m.conn.ExecCtx(ctx, query, "待发货", landOrderId)
	return err
}
