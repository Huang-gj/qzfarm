// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.4

package userModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByPhoneNumber(ctx context.Context, phoneNumber string) (*User, error)
		UpdateUserInfo(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
		UpdateAvatar(ctx context.Context, userId int64, avatar string) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id          int64     `db:"id"`
		DelState    int64     `db:"del_state"`    // 0-正常 1-删除
		DelTime     time.Time `db:"del_time"`     // 创建时间
		CreateTime  time.Time `db:"create_time"`  // 删除时间
		UserId      int64     `db:"user_id"`      // 分布式唯一ID
		PhoneNumber string    `db:"phone_number"` // 用户电话号码
		Password    string    `db:"password"`     // 用户密码
		Avatar      string    `db:"avatar"`       // 用户头像url
		Nickname    string    `db:"nickname"`     // 用户昵称
		Address     string    `db:"address"`      // 用户地址
		Gender      int64     `db:"gender"`       // 0-未知 1-男 2-女
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DelState, data.DelTime, data.UserId, data.PhoneNumber, data.Password, data.Avatar, data.Nickname, data.Address, data.Gender)
	return ret, err
}

func (m *defaultUserModel) UpdateUserInfo(ctx context.Context, data *User) error {
	query := fmt.Sprintf(`UPDATE %s 
		SET del_state = ?, 
		    phone_number = ?, 
		    avatar = ?, 
		    nickname = ?, 
		    address = ?, 
		    gender = ? 
		WHERE user_id = ?`, m.table)

	_, err := m.conn.ExecCtx(ctx, query,
		data.DelState,
		data.PhoneNumber,
		data.Avatar,
		data.Nickname,
		data.Address,
		data.Gender,
		data.UserId,
	)

	return err
}


func (m *defaultUserModel) FindOneByPhoneNumber(ctx context.Context, phoneNumber string) (*User, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE phone_number = ? LIMIT 1", userRows, m.table)

	var user User
	err := m.conn.QueryRowCtx(ctx, &user, query, phoneNumber)
	if err != nil {
		return nil, err
	}
	return &user, nil
}
func (m *defaultUserModel) UpdateAvatar(ctx context.Context, userId int64, avatar string) error {
	query := fmt.Sprintf("UPDATE %s SET avatar = ? WHERE user_id = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, avatar, userId)
	return err
}


func (m *defaultUserModel) tableName() string {
	return m.table
}
